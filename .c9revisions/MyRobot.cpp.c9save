{"ts":1357449478158,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n*     _________          _____________     _________________    ______________\n*    /          \\       |    _____    |   |                 /  |   _______    |   \n*   /    ___     \\      |   |     |   |   |                /   |  |       |   |\n*  /    /   \\     \\     |   |     |   |   |________       /    |  |       |   |\n* |_____|   /     /     |   |     |   |           /      /     |  |       |   |\n*          /     /       \\   \\___/    /          /      /      |  |_______|   |\n*         /     /         \\          /          /      /       |__________    |\n*        /     /          /   ____   \\         /      /                   |   |\n*       /     /          /   /    \\   \\       /      /                    |   |\n*      /     /          |   |      |   |     /      /                     |   |\n*     /     /_______    |   |      |   |    /      /                      |   | \n*    |              |   |   |______|   |   /      /                       |   |\n*    |______________|   |______________|  /______/                        |___|  \n*/\n\n/*\n* TEAM 2879 robot code\n* Version unknown - continuing pre-kickoff development\n* \n*/\n\n/*\n*   HARDWARE CONFIGURATION\n*   \n*   Device:                      Connection:\n*   --------------------------------------------------\n*   (jag) Front Right            (Sidecar) PWM port #1 \n*   (jag) Front Left             (Sidecar) PWM port #2\n*   (jag) Back Right             (Sidecar) PWM port #3\n*   (jag) Back Left              (Sidecar) PWM port #4\n*   (spike) Compressor           (Sidecar) Relay port #1\n*   Logitech Attack3 joystick    (Laptop)  USB port #1\n*   USB xBox controller          (Laptop)  USB port #1 (as an alternative to the joystick)\n*/\n\n\n#include \"WPILib.h\"\n\nclass River : public SimpleRobot\n{\n     // Misc Variables\n     bool squaredInputs;  // variable used to set \"squared inputs\" Not actually used at this point.\n     float throttle;   // used to represent the position of the \"throttle\" on an attack 3 joystick\n     float move;  // used to represent the raw Y AXIS. AXIS #2 on the attack 3 joystick\n     float spin; // used to represent the raw X AXIS. AXIS #1 on the attack 3 joystick\n     \n     // Relays\n     \n     // Motor Controllers\n     Jaguar frontRight; // jag on port #1\n     Jaguar frontLeft;  // jag on port #2\n     Jaguar backRight;  // jag on port #3\n     Jaguar backLeft;   // jag on port #4\n     \n     // HIDs\n     Joystick driveStick;\n     //Joystick derpDerp  // uncomment for xbox control\n     \n     // Important Stuff\n     RobotDrive River_Drive;\n     DriverStationLCD* userDisplay;\n     \npublic:\n    River(void):\n         //as they are declared above! \n         frontRight(1),\n         frontLeft(2),\n         backRight(3),\n         backLeft(4),\n         driveStick(1),\n         // derpDerp(1),   // uncomment for xbox control\n         River_Drive(&frontLeft, &backLeft, &frontRight, &backRight) // River_Drive uses jags as declared above\n    {\n         GetWatchdog().SetExpiration(0.1);   //sets the saftey expiration for watchdog\n         River_Drive.SetExpiration(0.1);     //sets safey expiration for River_Drive\n         \n         throttle=((.5 * driveStick.GetThrottle()) + .5); // changes throttle from raw input (-1 to 1) to (0 to 1)\n         userDisplay = DriverStationLCD::GetInstance();\n         userDisplay->Clear();\n    }\n    \n    //~~~~~~~~~~~~~~ Display Utities ~~~~~~~~~~~~~~~~~~\n    void clearlineOne(void) {   // Clears line #1\n       userDisplay->Printf(DriverStationLCD::kUser_Line1, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineTwo(void) {   // Clears line #2\n       userDisplay->Printf(DriverStationLCD::kUser_Line2, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineThree(void) {   // Clears line #3\n       userDisplay->Printf(DriverStationLCD::kUser_Line3, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineFour(void) {   // Clears line #4\n       userDisplay->Printf(DriverStationLCD::kUser_Line4, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineFive(void) {   // Clears line #5\n       userDisplay->Printf(DriverStationLCD::kUser_Line5, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineSix(void) {   // Clears line #6\n       userDisplay->Printf(DriverStationLCD::kUser_Line6, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    //~~~~~~~~~~~~ Motor Control ~~~~~~~~~~~~~~~~~~~~~~~\n    void allJags (float speed) { // sets all the jags \n        frontRight.Set (speed);\n        frontLeft.Set (speed);\n        backRight.Set (speed);\n        backLeft.Set (speed);\n    }\n    void rightJags (float speed) { // sets just the right jags \n        frontRight.Set (speed);\n        backRight.Set (speed);\n    }\n    void leftJags (float speed) { // sets just the left jags\n        frontLeft.Set (speed);\n        backLeft.Set (speed);\n    }\n    void rotateRight (float speed) { // roates the robot Right\n        rightJags (-speed);\n        leftJags (speed);\n    }\n    void roateLeft (float speed) { // rotates the robot Left\n        rightJags (speed);\n        leftJags (-speed);\n    }\n    void strafeLeft(float speed) { // strafes Left at a given speed\n        frontRight.Set(speed);\n        frontLeft.Set(-speed);\n        backRight.Set(-speed);\n        backLeft.Set(speed);\n    }\n    void strafeRight(float speed) { // strafes Right at a given speed\n        frontRight.Set(-speed);\n        frontLeft.Set(speed);\n        backRight.Set(speed);\n        backLeft.Set(-speed);\n    }\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    void Autonomous(void)\n    {\n       rotateRight(1.0);\n       Wait(10.0);   // lololololloololololololol\n       allJags(0.0);\n    }\n    \n    void OperatorControl(void)\n    {\n         GetWatchdog().SetEnabled(true);\n         while (IsOperatorControl()) {\n             \n             GetWatchdog().Feed();\n             \n             //~~~~~~~~~~~~~ Updated Variabled and Diagnostics ~~~~~~~~~~~~~~~~~\n             throttle = ((.5 * driveStick.GetThrottle()) + .5);\n             move = (driveStick.GetRawAxis(2));\n             spin = (driveStick.GetRawAxis(1));\n             \n             clearlineOne();\n             clearlineTwo();\n             userDisplay->Printf(DriverStationLCD::kUser_Line2, 1, \"Move: %d\", (int) (move*100));\n             userDisplay->Printf(DriverStationLCD::kUser_Line2, 15, \"Spin: %d\", (int) (spin*100));\n             userDisplay->Printf(DriverStationLCD::kUser_Line1, 1, \"LOLz: %d\", (int) (throttle*100));\n             userDisplay->UpdateLCD();\n             //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n             if (driveStick.GetTrigger()) {\n                 River_Drive.MecanumDrive_Cartesian(driveStick.GetX(), driveStick.GetY(), 0.0, 0.0);\n             }\n             /*\n              * if (derpDerp.GetRawAxis(3) > .5) {\n              *    River_Drive.Mecanum_Cartesian(derpDerp.GetRawAxis(1), derpDerp.GetRawAxis(2), derpDerp.GetRawAxis(4), 0.0)\n              * }\n              */\n             else if (driveStick.GetRawButton(3)) {\n                 allJags(throttle);\n                 //all of these commands can be assigned to the d pad on the xbox controler, but firt we're gonna have to figure out which buttons those are...\n             }\n             else if (driveStick.GetRawButton(2)){\n                 allJags(-throttle);\n             }\n             else if (driveStick.GetRawButton(4)) {\n                 strafeLeft(throttle);\n             }\n             else if (driveStick.GetRawButton(5)) {\n                 strafeRight(throttle);\n             }\n             else {\n             River_Drive.ArcadeDrive(spin, move, false);\n             }\n             /*\n              * else {\n              * River_Drive.ArcadeDrive(derpDerp.GetRawAxis(1)), derpDerp.GetRawAxis(2), false);\n              * }\n              */\n            \n         }\n        \n    }\n    \n};\n\nSTART_ROBOT_CLASS(River);\n"]],"start1":0,"start2":0,"length1":0,"length2":8055}]],"length":8055}
{"contributors":[],"silentsave":false,"ts":1358975425504,"patch":[[{"diffs":[[0,"Ds\n     "],[1,"//"],[0,"Joystick"]],"start1":2394,"start2":2394,"length1":16,"length2":18},{"diffs":[[0,"veStick;"],[1," // uncomment for joystick control"],[0,"\n     "],[-1,"//"],[0,"Joystick"]],"start1":2416,"start2":2416,"length1":24,"length2":56},{"diffs":[[0,"        "],[1," //"],[0," driveSt"]],"start1":2771,"start2":2771,"length1":16,"length2":19},{"diffs":[[0,"tick(1),"],[-1,"\n"],[0," "],[1," // uncomment for joystick control\n"],[0,"        "],[-1,"//"],[0," derpDer"]],"start1":2789,"start2":2789,"length1":28,"length2":60},{"diffs":[[0,"ed above"],[1,"... Remove 2 of these to accomadate 2 wheel tank drive"],[0,"\n    {\n "]],"start1":2990,"start2":2990,"length1":16,"length2":70}]],"length":8178,"saved":false}
