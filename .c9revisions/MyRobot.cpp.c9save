{"ts":1357449478158,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n*     _________          _____________     _________________    ______________\n*    /          \\       |    _____    |   |                 /  |   _______    |   \n*   /    ___     \\      |   |     |   |   |                /   |  |       |   |\n*  /    /   \\     \\     |   |     |   |   |________       /    |  |       |   |\n* |_____|   /     /     |   |     |   |           /      /     |  |       |   |\n*          /     /       \\   \\___/    /          /      /      |  |_______|   |\n*         /     /         \\          /          /      /       |__________    |\n*        /     /          /   ____   \\         /      /                   |   |\n*       /     /          /   /    \\   \\       /      /                    |   |\n*      /     /          |   |      |   |     /      /                     |   |\n*     /     /_______    |   |      |   |    /      /                      |   | \n*    |              |   |   |______|   |   /      /                       |   |\n*    |______________|   |______________|  /______/                        |___|  \n*/\n\n/*\n* TEAM 2879 robot code\n* Version unknown - continuing pre-kickoff development\n* \n*/\n\n/*\n*   HARDWARE CONFIGURATION\n*   \n*   Device:                      Connection:\n*   --------------------------------------------------\n*   (jag) Front Right            (Sidecar) PWM port #1 \n*   (jag) Front Left             (Sidecar) PWM port #2\n*   (jag) Back Right             (Sidecar) PWM port #3\n*   (jag) Back Left              (Sidecar) PWM port #4\n*   (spike) Compressor           (Sidecar) Relay port #1\n*   Logitech Attack3 joystick    (Laptop)  USB port #1\n*   USB xBox controller          (Laptop)  USB port #1 (as an alternative to the joystick)\n*/\n\n\n#include \"WPILib.h\"\n\nclass River : public SimpleRobot\n{\n     // Misc Variables\n     bool squaredInputs;  // variable used to set \"squared inputs\" Not actually used at this point.\n     float throttle;   // used to represent the position of the \"throttle\" on an attack 3 joystick\n     float move;  // used to represent the raw Y AXIS. AXIS #2 on the attack 3 joystick\n     float spin; // used to represent the raw X AXIS. AXIS #1 on the attack 3 joystick\n     \n     // Relays\n     \n     // Motor Controllers\n     Jaguar frontRight; // jag on port #1\n     Jaguar frontLeft;  // jag on port #2\n     Jaguar backRight;  // jag on port #3\n     Jaguar backLeft;   // jag on port #4\n     \n     // HIDs\n     Joystick driveStick;\n     //Joystick derpDerp  // uncomment for xbox control\n     \n     // Important Stuff\n     RobotDrive River_Drive;\n     DriverStationLCD* userDisplay;\n     \npublic:\n    River(void):\n         //as they are declared above! \n         frontRight(1),\n         frontLeft(2),\n         backRight(3),\n         backLeft(4),\n         driveStick(1),\n         // derpDerp(1),   // uncomment for xbox control\n         River_Drive(&frontLeft, &backLeft, &frontRight, &backRight) // River_Drive uses jags as declared above\n    {\n         GetWatchdog().SetExpiration(0.1);   //sets the saftey expiration for watchdog\n         River_Drive.SetExpiration(0.1);     //sets safey expiration for River_Drive\n         \n         throttle=((.5 * driveStick.GetThrottle()) + .5); // changes throttle from raw input (-1 to 1) to (0 to 1)\n         userDisplay = DriverStationLCD::GetInstance();\n         userDisplay->Clear();\n    }\n    \n    //~~~~~~~~~~~~~~ Display Utities ~~~~~~~~~~~~~~~~~~\n    void clearlineOne(void) {   // Clears line #1\n       userDisplay->Printf(DriverStationLCD::kUser_Line1, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineTwo(void) {   // Clears line #2\n       userDisplay->Printf(DriverStationLCD::kUser_Line2, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineThree(void) {   // Clears line #3\n       userDisplay->Printf(DriverStationLCD::kUser_Line3, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineFour(void) {   // Clears line #4\n       userDisplay->Printf(DriverStationLCD::kUser_Line4, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineFive(void) {   // Clears line #5\n       userDisplay->Printf(DriverStationLCD::kUser_Line5, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    void clearlineSix(void) {   // Clears line #6\n       userDisplay->Printf(DriverStationLCD::kUser_Line6, 1, \"                   \");\n       userDisplay->UpdateLCD();\n    }\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    //~~~~~~~~~~~~ Motor Control ~~~~~~~~~~~~~~~~~~~~~~~\n    void allJags (float speed) { // sets all the jags \n        frontRight.Set (speed);\n        frontLeft.Set (speed);\n        backRight.Set (speed);\n        backLeft.Set (speed);\n    }\n    void rightJags (float speed) { // sets just the right jags \n        frontRight.Set (speed);\n        backRight.Set (speed);\n    }\n    void leftJags (float speed) { // sets just the left jags\n        frontLeft.Set (speed);\n        backLeft.Set (speed);\n    }\n    void rotateRight (float speed) { // roates the robot Right\n        rightJags (-speed);\n        leftJags (speed);\n    }\n    void roateLeft (float speed) { // rotates the robot Left\n        rightJags (speed);\n        leftJags (-speed);\n    }\n    void strafeLeft(float speed) { // strafes Left at a given speed\n        frontRight.Set(speed);\n        frontLeft.Set(-speed);\n        backRight.Set(-speed);\n        backLeft.Set(speed);\n    }\n    void strafeRight(float speed) { // strafes Right at a given speed\n        frontRight.Set(-speed);\n        frontLeft.Set(speed);\n        backRight.Set(speed);\n        backLeft.Set(-speed);\n    }\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    void Autonomous(void)\n    {\n       rotateRight(1.0);\n       Wait(10.0);   // lololololloololololololol\n       allJags(0.0);\n    }\n    \n    void OperatorControl(void)\n    {\n         GetWatchdog().SetEnabled(true);\n         while (IsOperatorControl()) {\n             \n             GetWatchdog().Feed();\n             \n             //~~~~~~~~~~~~~ Updated Variabled and Diagnostics ~~~~~~~~~~~~~~~~~\n             throttle = ((.5 * driveStick.GetThrottle()) + .5);\n             move = (driveStick.GetRawAxis(2));\n             spin = (driveStick.GetRawAxis(1));\n             \n             clearlineOne();\n             clearlineTwo();\n             userDisplay->Printf(DriverStationLCD::kUser_Line2, 1, \"Move: %d\", (int) (move*100));\n             userDisplay->Printf(DriverStationLCD::kUser_Line2, 15, \"Spin: %d\", (int) (spin*100));\n             userDisplay->Printf(DriverStationLCD::kUser_Line1, 1, \"LOLz: %d\", (int) (throttle*100));\n             userDisplay->UpdateLCD();\n             //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n             if (driveStick.GetTrigger()) {\n                 River_Drive.MecanumDrive_Cartesian(driveStick.GetX(), driveStick.GetY(), 0.0, 0.0);\n             }\n             /*\n              * if (derpDerp.GetRawAxis(3) > .5) {\n              *    River_Drive.Mecanum_Cartesian(derpDerp.GetRawAxis(1), derpDerp.GetRawAxis(2), derpDerp.GetRawAxis(4), 0.0)\n              * }\n              */\n             else if (driveStick.GetRawButton(3)) {\n                 allJags(throttle);\n                 //all of these commands can be assigned to the d pad on the xbox controler, but firt we're gonna have to figure out which buttons those are...\n             }\n             else if (driveStick.GetRawButton(2)){\n                 allJags(-throttle);\n             }\n             else if (driveStick.GetRawButton(4)) {\n                 strafeLeft(throttle);\n             }\n             else if (driveStick.GetRawButton(5)) {\n                 strafeRight(throttle);\n             }\n             else {\n             River_Drive.ArcadeDrive(spin, move, false);\n             }\n             /*\n              * else {\n              * River_Drive.ArcadeDrive(derpDerp.GetRawAxis(1)), derpDerp.GetRawAxis(2), false);\n              * }\n              */\n            \n         }\n        \n    }\n    \n};\n\nSTART_ROBOT_CLASS(River);\n"]],"start1":0,"start2":0,"length1":0,"length2":8055}]],"length":8055}
{"contributors":[],"silentsave":false,"ts":1358975425504,"patch":[[{"diffs":[[0,"Ds\n     "],[1,"//"],[0,"Joystick"]],"start1":2394,"start2":2394,"length1":16,"length2":18},{"diffs":[[0,"veStick;"],[1," // uncomment for joystick control"],[0,"\n     "],[-1,"//"],[0,"Joystick"]],"start1":2416,"start2":2416,"length1":24,"length2":56},{"diffs":[[0,"        "],[1," //"],[0," driveSt"]],"start1":2771,"start2":2771,"length1":16,"length2":19},{"diffs":[[0,"tick(1),"],[-1,"\n"],[0," "],[1," // uncomment for joystick control\n"],[0,"        "],[-1,"//"],[0," derpDer"]],"start1":2789,"start2":2789,"length1":28,"length2":60},{"diffs":[[0,"ed above"],[1,"... Remove 2 of these to accomadate 2 wheel tank drive"],[0,"\n    {\n "]],"start1":2990,"start2":2990,"length1":16,"length2":70}]],"length":8178,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359391765388,"patch":[[{"diffs":[[0," \n*/\n\n/*"],[-1,""],[0,""],[1,"  Interesting quotes from development:\n *  --------------------------------------------------\n *   Gregory: \"Make the computer thingy\"\n * \n */\n\n/*"],[0,"\n*   HAR"]],"start1":1134,"start2":1134,"length1":16,"length2":162},{"diffs":[[0,"USB "],[-1,"xB"],[1,"Xb"],[0,"ox c"]],"start1":1758,"start2":1758,"length1":10,"length2":10},{"diffs":[[0,"ller"],[-1,"s\n     Jaguar frontRight; // jag on port #1\n     Jaguar frontLeft;  // jag on port #2"],[0,"\n   "]],"start1":2350,"start2":2350,"length1":93,"length2":8},{"diffs":[[0,"n port #"],[-1,"3"],[1,"1"],[0,"\n     Ja"]],"start1":2387,"start2":2387,"length1":17,"length2":17},{"diffs":[[0,"n port #"],[-1,"4"],[1,"2"],[0,"\n     \n "]],"start1":2429,"start2":2429,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"//Joystick driveStick; // uncomment for joystick control\n     Joystick derpDerp  // uncomment for xbox control"],[1,"Joystick derpDerp  // Logitech Gamepad"],[0,"\n   "]],"start1":2459,"start2":2459,"length1":118,"length2":46},{"diffs":[[0,"e! \n"],[-1,"         frontRight(1),\n         frontLeft(2),\n"],[0,"    "]],"start1":2664,"start2":2664,"length1":55,"length2":8},{"diffs":[[0,"ckRight("],[-1,"3"],[1,"1"],[0,"),\n     "]],"start1":2679,"start2":2679,"length1":17,"length2":17},{"diffs":[[0,"ackLeft("],[-1,"4"],[1,"2"],[0,"),\n     "]],"start1":2701,"start2":2701,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"// driveStick(1),  // uncomment for joystick control\n         derpDerp(1),   // uncomment for xbox control\n         River_Drive(&frontLeft, &backLeft, &frontRigh"],[1,"derpDerp(1),   // logitech gamepad...\n         River_Drive(&backLef"],[0,"t, &"]],"start1":2718,"start2":2718,"length1":169,"length2":75},{"diffs":[[0,"ive\n"],[-1,"         \n         throttle=((.5 * driveStick.GetThrottle()) + .5); // changes throttle from raw input (-1 to 1) to (0 to 1)\n         userDisplay = DriverStationLCD::GetInstance();\n         userDisplay->Clear();\n"],[0,"    "]],"start1":3075,"start2":3075,"length1":220,"length2":8},{"diffs":[[0,"gs \n"],[-1,"        frontRight.Set (speed);\n        frontLeft.Set (speed);\n"],[0,"    "]],"start1":4364,"start2":4364,"length1":71,"length2":8},{"diffs":[[0,"gs \n"],[-1,"        frontRight.Set (speed);\n"],[0,"    "]],"start1":4495,"start2":4495,"length1":40,"length2":8},{"diffs":[[0,"ags\n"],[-1,"        frontLeft.Set (speed);\n"],[0,"    "]],"start1":4593,"start2":4593,"length1":39,"length2":8},{"diffs":[[0,"    "],[-1,"void strafeLeft(float speed) { // strafes Left at a given speed\n        frontRight.Set(speed);\n        frontLeft.Set(-speed);\n        backRight.Set(-speed);\n        backLeft.Set(speed);\n    }\n    void strafeRight(float speed) { // strafes Right at a given speed\n        frontRight.Set(-speed);\n        frontLeft.Set(speed);\n        backRight.Set(speed);\n        backLeft.Set(-speed);\n    }\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    void Autonomous(void)\n    {"],[1,"//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    void Autonomous(void)\n    {\n       GetWatchdog().SetEnabled(false);    // disable the watchdog so it doesn't screw everything up."],[0,"\n   "]],"start1":4877,"start2":4877,"length1":491,"length2":199},{"diffs":[[0,"ght("],[-1,"1.0"],[1,"0.8"],[0,");\n "]],"start1":5088,"start2":5088,"length1":11,"length2":11},{"diffs":[[0,"   Wait("],[-1,"10"],[1,"3"],[0,".0);   /"]],"start1":5102,"start2":5102,"length1":18,"length2":17}]],"length":7395,"saved":false}
{"ts":1359391851902,"patch":[[{"diffs":[[0,"~~~\n"],[-1,"             throttle = ((.5 * driveStick.GetThrottle()) + .5);\n"],[0,"    "]],"start1":5436,"start2":5436,"length1":72,"length2":8}]],"length":7331,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359411739964,"patch":[[{"diffs":[[0,"Version "],[-1,"u"],[1,"U"],[0,"nknown -"]],"start1":1080,"start2":1080,"length1":17,"length2":17},{"diffs":[[0,"n - "],[-1,"continuing pre-kickoff development"],[1,"Xbox controller?"],[0,"\n* \n"]],"start1":1094,"start2":1094,"length1":42,"length2":24},{"diffs":[[0,"---\n"],[-1,"*   (jag) Front Right            (Sidecar) PWM port #1 \n*   (jag) Front Left             (Sidecar) PWM port #2\n"],[0,"*   "]],"start1":1399,"start2":1399,"length1":119,"length2":8},{"diffs":[[0,"M port #"],[-1,"3"],[1,"1 "],[0,"\n*   (ja"]],"start1":1448,"start2":1448,"length1":17,"length2":18},{"diffs":[[0,"M port #"],[-1,"4"],[1,"2"],[0,"\n*   (sp"]],"start1":1504,"start2":1504,"length1":17,"length2":17}]],"length":7203,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359414696867,"patch":[[{"diffs":[[0,"*   "],[-1,"Logitech Attack3 joystick    (Laptop)  USB port #1\n*   USB Xbox controller          (Laptop)  USB port #1 (as an alternative to the joystick)\n*/"],[1,"USB Xbox controller          (Laptop)  USB port #1 (Usin it for real now. This code will not work with a standard joystick)\n*/\n\n#define Button_X 1\n#define Button_Y 4\n#define Button_A 2\n#define Button_B 3\n#define Button_START 10\n#define Button_BACK 9\n#define Button_RIGHT_BUMPER 6\n#define Button_RIGHT_TRIGGER 8\n#define Button_LEFT_BUMPER 5\n#define Button_LEFT_TRIGGER 7"],[0,"\n\n\n#"]],"start1":1571,"start2":1571,"length1":152,"length2":377},{"diffs":[[0,"the "],[-1,"position of the \"throttle\" on an attack 3 joystick"],[1,"alternate \"throttle\" value."],[0,"\n   "]],"start1":2170,"start2":2170,"length1":58,"length2":35},{"diffs":[[0,"XIS #2 o"],[-1,"n"],[1,"f"],[0," the "],[-1,"attack 3 joystick"],[1,"left stick on the gamepad."],[0,"\n     fl"]],"start1":2258,"start2":2258,"length1":39,"length2":48},{"diffs":[[0,"#1 o"],[-1,"n"],[1,"f"],[0," the "],[-1,"attack 3 joystick\n     \n     // Relays"],[1,"left stick on the gamepad.\n     \n     // Relays\n     Relay Comp; // spike relay on port one for air compressor."],[0,"\n   "]],"start1":2358,"start2":2358,"length1":52,"length2":125},{"diffs":[[0,"r_Drive\n    "],[-1,"}"],[1,"\n    \n    "],[0,"\n    \n    //"]],"start1":3227,"start2":3227,"length1":25,"length2":34},{"diffs":[[0,";\n             \n"],[1,"             if (derpDerp.GetRawButton(Button_LEFT_TRIGGER)){\n                if (throttle < 1)\n               throttle=(throttle + .10);\n               else\n               throttle=(1);\n             }\n             if (derpDerp.GetRawButton(Button_LEFT_BUMPER)){\n                 if (throttle > 0)\n                 throttle = (throttle - .10);\n                 else\n                 throttle = (0);\n             }\n             \n             \n"],[0,"             cle"]],"start1":5699,"start2":5699,"length1":32,"length2":474}]],"length":7938,"saved":false}
{"ts":1359414742820,"patch":[[{"diffs":[[0,"    "],[-1,"if (driveStick.GetTrigger()) {\n                 River_Drive.MecanumDrive_Cartesian(driveStick.GetX(), driveStick.GetY(), 0.0, 0.0);\n             }\n             /*\n              * if (derpDerp.GetRawAxis(3) > .5) {\n              *    River_Drive.Mecanum_Cartesian(derpDerp.GetRawAxis(1), derpDerp.GetRawAxis(2), derpDerp.GetRawAxis(4), 0.0)\n              * }\n              */\n             else"],[1,"\n            "],[0," if "]],"start1":6643,"start2":6643,"length1":400,"length2":21}]],"length":7559,"saved":false}
{"ts":1359415248516,"patch":[[{"diffs":[[0,"GGER 7\n\n"],[1,"#define Stick_LEFT_Y 2\n#define Stick_LEFT_X 1\n#define Stick_RIGHT_X 4\n#define Stick_RIGHT_Y 5\n"],[0,"\n#includ"]],"start1":1938,"start2":1938,"length1":16,"length2":110},{"diffs":[[0,"   move = (d"],[-1,"riveStick"],[1,"erpDerp"],[0,".GetRawAxis("]],"start1":5709,"start2":5709,"length1":33,"length2":31},{"diffs":[[0,"RawAxis("],[-1,"2"],[1,"Stick_LEFT_Y"],[0,"));\n    "]],"start1":5732,"start2":5732,"length1":17,"length2":28},{"diffs":[[0,"pin = (d"],[-1,"riveStick"],[1,"erpDerp"],[0,".GetRawA"]],"start1":5770,"start2":5770,"length1":25,"length2":23},{"diffs":[[0,"RawAxis("],[-1,"1"],[1,"Stick_LEFT_X"],[0,"));\n    "]],"start1":5789,"start2":5789,"length1":17,"length2":28},{"diffs":[[0,"   \n"],[-1,"             if (driveStick.GetRawButton(3)) {\n                 allJags(throttle);\n                 //all of these commands can be assigned to the d pad on the xbox controler, but firt we're gonna have to figure out which buttons those are...\n             }\n             else if (driveStick.GetRawButton(2)){\n                 allJags(-throttle);\n             }\n             else if (driveStick.GetRawButton(4)) {\n                 strafeLeft(throttle);\n             }\n             else if (driveStick.GetRawButton(5)) {\n                 strafeRight(throttle);\n             }\n             else {\n"],[0,"    "]],"start1":6756,"start2":6756,"length1":602,"length2":8},{"diffs":[[0,");\n             "],[-1,"}"],[0,"\n             /*"]],"start1":6814,"start2":6814,"length1":33,"length2":32}]],"length":7076,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359556142868,"patch":[[{"diffs":[[0,"GURATION"],[1,"\n\n*   WARNING: The Talons do have their own class, seperate from \"jags.\" However, this class is not implimented yet. In order to use Talons with the Jaguar class, you may need to calibrate the Talons to use the Jaguar PWM conventions."],[0,"\n*   \n* "]],"start1":1289,"start2":1289,"length1":16,"length2":250},{"diffs":[[0,"port #1\n"],[1,"*   Digital Pressure Sensor      (Sidecar) Digital Input Port #1\n"],[0,"*   USB "]],"start1":1797,"start2":1797,"length1":16,"length2":81},{"diffs":[[0," point.\n"],[1,"     bool AltDrive;  //Boolean used to toggle drive mode / stick configuration.\n"],[0,"     flo"]],"start1":2511,"start2":2511,"length1":16,"length2":96},{"diffs":[[0,"ys\n     "],[-1,"Relay"],[1,"Compressor"],[0," Comp; /"]],"start1":2886,"start2":2886,"length1":21,"length2":26},{"diffs":[[0," Gamepad"],[-1,""],[0,""],[1," NOT a normal joystick"],[0,"\n     \n "]],"start1":3127,"start2":3127,"length1":16,"length2":38},{"diffs":[[0,"above! \n"],[1,"         Comp(1,1),  // RELAY port #1 and Digital Input Port #1\n"],[0,"        "]],"start1":3316,"start2":3316,"length1":16,"length2":80},{"diffs":[[0,"e..."],[-1," Remove 2 of these to accomadate 2 wheel tank drive"],[0,""],[1,""],[0,"\n   "]],"start1":3565,"start2":3565,"length1":59,"length2":8},{"diffs":[[0,"r_Drive\n    "],[-1,""],[0,""],[1,"     Comp.Start();"],[0,"\n    \n    \n "]],"start1":3740,"start2":3740,"length1":24,"length2":42},{"diffs":[[0,";\n             \n"],[1,"             if (derpDerp.GetRawButton(Button_RIGHT_TRIGGER)){\n                SquaredInputs=True;\n             }\n             else {\n                SquaredInputs=False;\n             }\n             \n"],[0,"             if "]],"start1":6248,"start2":6248,"length1":32,"length2":232},{"diffs":[[0,"}\n             \n"],[1,"             if ((derpDerp.GetRawButton(Button_START)) & (!AltDrive) {\n                 \n             }\n             \n"],[0,"             \n  "]],"start1":6876,"start2":6876,"length1":32,"length2":150},{"diffs":[[0,"ve, "],[-1,"false);\n             \n             /*\n              * else {\n              * River_Drive.ArcadeDrive(derpDerp.GetRawAxis(1)), derpDerp.GetRawAxis(2), false"],[1,"SquaredInputs"],[0,");\n "]],"start1":7560,"start2":7560,"length1":163,"length2":21},{"diffs":[[0,"    "],[-1," * }"],[0,"\n   "]],"start1":7589,"start2":7589,"length1":12,"length2":8},{"diffs":[[0,"        "],[-1," */"],[0,"\n       "]],"start1":7599,"start2":7599,"length1":19,"length2":16}]],"length":7682,"saved":false}
{"ts":1359556552382,"patch":[[{"diffs":[[0,"     if "],[-1,"("],[0,"(derpDer"]],"start1":6900,"start2":6900,"length1":17,"length2":16},{"diffs":[[0,"RT))"],[-1," & (!AltDrive) "],[0,"{\n  "]],"start1":6941,"start2":6941,"length1":23,"length2":8},{"diffs":[[0,"                "],[1,"if (!AltDrive){\n                  AltDrive = true\n                 }\n                 else if (AltDrive) {\n                  AltDrive = false\n                 }\n                AltDrive = true"],[0,"\n             }\n"]],"start1":6948,"start2":6948,"length1":32,"length2":224},{"diffs":[[0,"~\n             \n"],[1,"             if (AltDrive) {\n             River_Drive.ArcadeDrive(derpDerp.GetRawAxis)\n             }\n             \n"],[0,"             Riv"]],"start1":7675,"start2":7675,"length1":32,"length2":148},{"diffs":[[0," \n             \n"],[1,"             \n"],[0,"            \n   "]],"start1":7884,"start2":7884,"length1":32,"length2":46}]],"length":7988,"saved":false}
{"ts":1359556659744,"patch":[[{"diffs":[[0,"tRawAxis"],[1,"(Stick_LEFT_X), derpDerp.GetRawAxis(Stick_RIGHT_Y), SquaredInputs"],[0,")\n      "]],"start1":7768,"start2":7768,"length1":16,"length2":81},{"diffs":[[0," }\n             "],[1,"else {"],[0,"\n             Ri"]],"start1":7855,"start2":7855,"length1":32,"length2":38},{"diffs":[[0,");\n             "],[-1,""],[0,""],[1,"}"],[0,"\n             \n "]],"start1":7940,"start2":7940,"length1":32,"length2":33}]],"length":8060,"saved":false}
{"ts":1359558656049,"patch":[[{"diffs":[[0," }\n             "],[1,"     "],[0,"\n             \n "]],"start1":7955,"start2":7955,"length1":32,"length2":37}]],"length":8065,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359579412283,"patch":[[{"diffs":[[0,"dInputs="],[-1,"T"],[1,"t"],[0,"rue;\n   "]],"start1":6349,"start2":6349,"length1":17,"length2":17},{"diffs":[[0,"dInputs="],[-1,"F"],[1,"f"],[0,"alse;\n  "]],"start1":6420,"start2":6420,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"}\n                 else if (AltDrive) {\n                  AltDrive = false"],[1," clearlineThree();\n                  userDisplay->Printf(DriverStationLCD::kUser_Line3, 1, \"ALTERNATE DRIVE SCHEME\")\n                  userDisplay->UpdateLCD();\n                 }\n                 else if (AltDrive) {\n                  AltDrive = false\n                  clearlineThree();\n                  userDisplay->Printf(DriverStationLCD::kUser_Line3, 1, \"NORMAL DRIVE SCHEME\")\n                  userDisplay->UpdateLCD();"],[0,"\n   "]],"start1":7027,"start2":7027,"length1":82,"length2":435}]],"length":8418,"saved":false}
{"ts":1359579818260,"patch":[[{"diffs":[[0,"---\n*   (jag"],[1,"(talon)"],[0,") Back Right"]],"start1":1633,"start2":1633,"length1":24,"length2":31},{"diffs":[[0,"*   (jag"],[1,"(talon)"],[0,") Back L"]],"start1":1700,"start2":1700,"length1":16,"length2":23},{"diffs":[[0,"ckRight;  // jag"],[1,"(talon)"],[0," on port #1\n    "]],"start1":3017,"start2":3017,"length1":32,"length2":39},{"diffs":[[0,"  // jag"],[1,"(talon)"],[0," on port"]],"start1":3074,"start2":3074,"length1":16,"length2":23},{"diffs":[[0,"Start();"],[-1,""],[0,""],[1,"  //Starts the compressor when the robot is initialized"],[0,"\n    \n  "]],"start1":3790,"start2":3790,"length1":16,"length2":71},{"diffs":[[0,"Right(0."],[-1,"8"],[1,"5"],[0,");\n     "]],"start1":5865,"start2":5865,"length1":17,"length2":17},{"diffs":[[0,"                "],[1," "],[0,"SquaredInputs=tr"]],"start1":6410,"start2":6410,"length1":32,"length2":33},{"diffs":[[0,"         else {\n"],[1," "],[0,"                "]],"start1":6466,"start2":6466,"length1":32,"length2":33},{"diffs":[[0,"                "],[1," "],[0,"if (throttle < 1"]],"start1":6611,"start2":6611,"length1":32,"length2":33},{"diffs":[[0,"le < 1)\n"],[1,"  "],[0,"        "]],"start1":6638,"start2":6638,"length1":16,"length2":18},{"diffs":[[0,"\n               "],[1,"  "],[0,"else\n"],[1,"  "],[0,"               t"]],"start1":6689,"start2":6689,"length1":37,"length2":41},{"diffs":[[0,"START)){"],[-1,""],[0,""],[1,"     // Start button toggles drive modes. (1 stick, or 2 sticks)\n                 "],[0,"\n       "]],"start1":7030,"start2":7030,"length1":16,"length2":98},{"diffs":[[0,"  }\n"],[-1,"                AltDrive = true\n"],[0,"    "]],"start1":7648,"start2":7648,"length1":40,"length2":8},{"diffs":[[0,"dInputs)"],[-1,""],[0,""],[1,"   // Alternate drive scheme, uses both joystiks."],[0,"\n       "]],"start1":8329,"start2":8329,"length1":16,"length2":65}]],"length":8609,"saved":false}
{"ts":1359580015517,"patch":[[{"diffs":[[0,"ration.\n"],[1,"     bool ToggleOne;  // for use toggling things\n     bool ToggleTwo;  // for use toggling things\n"],[0,"     flo"]],"start1":2605,"start2":2605,"length1":16,"length2":114},{"diffs":[[0,"             if "],[1,"("],[0,"(derpDerp.GetRaw"]],"start1":7082,"start2":7082,"length1":32,"length2":33},{"diffs":[[0,"_START))"],[1," & !ToggleOne)"],[0,"{     //"]],"start1":7128,"start2":7128,"length1":16,"length2":30},{"diffs":[[0,"                "],[1,"ToggleOne = true"],[0,"\n               "]],"start1":7217,"start2":7217,"length1":32,"length2":48},{"diffs":[[0,"   \n            "],[1,"wait(0.005);  // refresh rate. The Wifi doesn't even work that fast, so why would we update that fast?"],[0,"\n         }\n    "]],"start1":8660,"start2":8660,"length1":32,"length2":134}]],"length":8840,"saved":false}
